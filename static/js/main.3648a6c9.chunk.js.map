{"version":3,"sources":["utils/Unsplash.js","store/actions/images.js","store/actions/loader.js","components/SearchBar/SearchBar.js","store/actions/query.js","components/QueryList/QueryList.js","components/ImagesContainer/NoImages/NoImages.js","components/ImagesContainer/ImagesContainer.js","containers/App/App.js","store/reducers/imagesReducer.js","store/reducers/queryReducer.js","store/reducers/index.js","index.js"],"names":["accessToken","url","this","fetch","query","axios","get","headers","then","response","data","results","catch","e","console","log","replaceImages","newState","type","startLoader","progressId","stopLoader","SearchBar","useState","keyword","setKeyword","setResults","isFirstRender","setIsFirstRender","dispatch","useDispatch","useEffect","className","value","onChange","target","onClick","id","uuid","Unsplash","QueryList","isClosed","setClosed","queryStore","useSelector","state","queryReducer","data-testid","closed","Closed","map","keywords","index","key","fetchApi","NoImages","style","marginTop","href","ImagesContainer","imagesStore","imagesReducer","length","item","links","html","src","urls","small","alt","alt_description","user","username","connect","isProgressActive","progress","isActive","color","action","alert","includes","allReducers","combineReducers","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3648a6c9.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nclass Unsplash\r\n{\r\n    accessToken = '46e4ac884131aec757a58eb7854dd07211744cdd9ad2ddfb6f8e7e3faed1eac2';\r\n    url = \"https://api.unsplash.com/search/photos/?page=1&client_id=\" + this.accessToken + \"&query=\";\r\n\r\n    fetch = (query) => {\r\n        return axios\r\n            .get(this.url + query, {\r\n                headers: {\r\n                    \"Accept-Version\": \"v1\"\r\n                }\r\n            })\r\n            .then( response => {\r\n                return response.data.results\r\n            })\r\n            .catch(e => {\r\n                console.log(e);\r\n                return e\r\n            })\r\n    };\r\n}\r\n\r\nexport default new Unsplash();","export const replaceImages = (newState) => {\r\n    return {\r\n        type: \"REPLACE_IMAGES\",\r\n        newState\r\n    }\r\n};","export const startLoader = (progressId) => ({\r\n    type: 'START_ASYNC_ACTION',\r\n    progressId,\r\n});\r\n\r\nexport const stopLoader = (progressId) => ({\r\n    type: 'STOP_ASYNC_ACTION',\r\n    progressId,\r\n});","import React, {useState, useEffect} from 'react';\r\nimport Unsplash from \"../../utils/Unsplash\";\r\nimport uuid from \"uuid/v1\"\r\nimport {addQuery, replaceImages, startLoader, stopLoader} from \"../../store/actions\"\r\nimport {useDispatch} from \"react-redux\";\r\nimport \"./SearchBar.scss\";\r\n\r\nconst SearchBar = () => {\r\n    const [keyword, setKeyword] = useState([]);\r\n    const [results, setResults] = useState([]);\r\n    const [isFirstRender, setIsFirstRender] = useState(true);\r\n    const dispatch = useDispatch();\r\n\r\n    const saveQuery = () => {\r\n        dispatch(addQuery(keyword));\r\n    };\r\n    const fetchApi = () => {\r\n        let id = uuid();\r\n        dispatch(startLoader(id));\r\n        Unsplash\r\n            .fetch(keyword)\r\n            .then(results => {\r\n                setResults(results);\r\n                dispatch(stopLoader(id));\r\n            });\r\n    };\r\n\r\n    useEffect(() => {\r\n        if(isFirstRender) {\r\n            return setIsFirstRender(false);\r\n        }\r\n        dispatch(replaceImages(results));\r\n    }, [results]);\r\n\r\n    return (\r\n        <section className=\"search-bar\">\r\n            <input type=\"text\" value={keyword} onChange={(e) => {setKeyword(e.target.value)}}/>\r\n            <button onClick={fetchApi}>Search</button>\r\n            <button onClick={saveQuery}>Save</button>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default SearchBar;","export const addQuery = (query) => {\r\n    return {\r\n        type: \"ADD_QUERY\",\r\n        query\r\n    }\r\n};","import React, {useState} from \"react\";\r\nimport Unsplash from \"../../utils/Unsplash\";\r\nimport {SlideDown} from \"react-slidedown\";\r\nimport {useSelector, useDispatch} from \"react-redux\";\r\nimport {replaceImages, startLoader, stopLoader} from \"../../store/actions\";\r\nimport \"react-slidedown/lib/slidedown.css\";\r\nimport \"./QueryList.scss\";\r\n\r\nconst QueryList = () => {\r\n    const [isClosed, setClosed] = useState(true);\r\n    const queryStore = useSelector(state => state.queryReducer);\r\n    const dispatch = useDispatch();\r\n\r\n    const fetchApi = (keywords) => {\r\n        let id = \"upload-images\";\r\n        dispatch(startLoader(id));\r\n        Unsplash\r\n            .fetch(keywords)\r\n            .then( results => {\r\n                dispatch(replaceImages(results));\r\n                dispatch(stopLoader(id));\r\n            });\r\n    };\r\n\r\n    const renderList = () => {\r\n        return (\r\n            queryStore.map((keywords, index) => (\r\n                <li key={index} onClick={ () => fetchApi(keywords)}>\r\n                    {keywords}\r\n                </li>\r\n            ))\r\n        )\r\n    };\r\n\r\n    return (\r\n        <section data-testid={\"query-list\"} className={\"query-list\"}>\r\n            <button onClick={() => setClosed(!isClosed)}>\r\n                Show saved queries\r\n            </button>\r\n            {/*test doesn't find prop - closed, had top put Closed also */}\r\n            <SlideDown closed={isClosed} Closed={isClosed} className=\"slider\" >\r\n                {renderList()}\r\n            </SlideDown>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default QueryList;","import React from 'react';\r\n\r\nconst NoImages = () => {\r\n    return (\r\n        <article style={{marginTop: '50px'}}>\r\n            <i>\r\n                No images found, images are from {' '}\r\n            </i>\r\n            <a href={\"https://unsplash.com/\"}>\r\n                Unsplash\r\n            </a>\r\n        </article>\r\n    );\r\n};\r\n\r\nexport default NoImages;","import React from 'react';\r\nimport NoImages from \"./NoImages/NoImages\";\r\nimport {useSelector} from \"react-redux\";\r\nimport \"./ImagesContainer.scss\"\r\n\r\nconst ImagesContainer = () => {\r\n    const imagesStore = useSelector(state => state.imagesReducer);\r\n\r\n    const renderImages = () => {\r\n        if (imagesStore.length===0) return <NoImages/>;\r\n        return imagesStore.map((item, index) => (\r\n            <a href={item.links.html}>\r\n                <img key={index} src={item.urls.small} alt={item.alt_description}/>\r\n                <div className=\"overlay\">\r\n                    image by <b>{item.user.username}</b> from <i>Unsplash</i>\r\n                </div>\r\n            </a>\r\n        ))\r\n    };\r\n\r\n    return (\r\n        <main className=\"images-container\">\r\n            {renderImages()}\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default ImagesContainer;","import React from 'react';\nimport SearchBar from \"../../components/SearchBar/SearchBar\";\nimport QueryList from \"../../components/QueryList/QueryList\";\nimport ImagesContainer from \"../../components/ImagesContainer/ImagesContainer\";\nimport { ProgressBarProvider } from 'react-redux-progress';\nimport { connect } from 'react-redux';\nimport \"./App.scss\"\n\nconst App = ({ isProgressActive}) => (\n            <div className=\"App\">\n                <ProgressBarProvider isActive={isProgressActive} color=\"#db7093\" />\n                <SearchBar/>\n                <QueryList/>\n                <ImagesContainer/>\n            </div>);\n\nexport default connect(\n    state => ({ isProgressActive: state.progress.isActive })\n)(App)\n","const imagesReducer = (state = [], action) => {\r\n    switch (action.type) {\r\n        case \"REPLACE_IMAGES\":\r\n            if(action.newState.length<1){\r\n                alert(\"No images found\")\r\n            }\r\n            return [...action.newState];\r\n        default:\r\n            return state;\r\n    }\r\n};\r\nexport default imagesReducer;","const queryReducer = (state = [], action) => {\r\n    switch (action.type) {\r\n        case \"ADD_QUERY\":\r\n            if(state.includes(action.query)) {\r\n                alert(\"Already exists\");\r\n                return [...state];\r\n            }\r\n            alert(\"Added\");\r\n            return [...state, action.query];\r\n        default:\r\n            return [...state];\r\n    }\r\n};\r\nexport default queryReducer;","import imagesReducer from \"./imagesReducer\";\r\nimport queryReducer from \"./queryReducer\";\r\nimport progress from 'react-redux-progress/reducer'\r\nimport {combineReducers} from \"redux\";\r\n\r\nconst allReducers = combineReducers({\r\n    imagesReducer,\r\n    queryReducer,\r\n    progress\r\n});\r\n\r\nexport default allReducers;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App/App';\nimport {createStore} from \"redux\";\nimport allReducers from './store/reducers'\nimport {Provider} from 'react-redux'\nimport './global-styles/index.scss';\n\nconst store = createStore(\n    allReducers\n);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root'));\n\n"],"sourceRoot":""}